@model MudasirRehmanAlp.Models.PurchaseOrder
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var counter = 0;
    MudasirRehmanAlp.AppDAL.CommonFunctionsDAL functionsDAL = new MudasirRehmanAlp.AppDAL.CommonFunctionsDAL();
    int valPOType = 0;
    int valTraType = 0;
}
<div class="content-heading">Purchase Order # @Model.PurchaseOrderNO</div>
<div class="panel panel-default">
    <div class="panel-heading">Purchase Order Information</div>
    <div class="panel-body">
        <div class="row">
            <div class="col-md-6">
                <p class="lead bb">Details</p>
                @using (Html.BeginForm("", "", FormMethod.Post, new { @class = "form-horizontal p-20" }))
                {

                    @Html.HiddenFor(model => model.PurchaseOrderId, new { @id = "hiddenPurchaseOrderId" })
                    <div class="form-group">
                        <div class="col-sm-4">PONO:</div>
                        <div class="col-sm-8">
                            <strong>@Model.PurchaseOrderNO</strong>
                            @Html.HiddenFor(model => model.PurchaseOrderNO, new { @id = "txtPONO" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Organization Name:</div>
                        <div class="col-sm-8">
                            <strong>@(Model.OrganizationDefinition.OrganizationUnitName ?? String.Empty)</strong>
                            @Html.HiddenFor(model => model.OrganizationID, new { @id = "hiddenOrganizationID" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Branch Name:</div>
                        <div class="col-sm-8">
                            <strong>@(Model.BranchDefinition.Name ?? String.Empty)</strong>
                            @Html.HiddenFor(model => model.BranchId, new { @id = "hiddenBranchId" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Date:</div>
                        <div class="col-sm-8">
                            <div class="input-group date datetimepicker">
                                @{
                                    if (Model.PurchaseOrderDate != null)
                                    {
                                        @Html.EditorFor(model => model.PurchaseOrderDate, new { htmlAttributes = new { @class = "form-control date ", @id = "txtPODte" } })
                                    }
                                    else
                                    {
                                        <input type="text" name="PurchaseOrderDate" class="form-control date" id="txtPODte" value="@DateTime.Now.ToString("MM/dd/yyyy hh:mm tt")" />
                                    }
                                }

                                <span class="input-group-addon">
                                    <span class="fa fa-calendar"></span>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Delivery Date:</div>
                        <div class="col-sm-8">
                            <div class="input-group date datetimepicker">
                                @{
                                    if (Model.DeliveryDate != null)
                                    {
                                        @Html.EditorFor(model => model.DeliveryDate, new { htmlAttributes = new { @class = "form-control", @id = "txtDeliveryDate", @Placeholder = "Please Delivery Date" } })
                                    }
                                    else
                                    {
                                        <input type="text" name="DeliveryDate" class="form-control date" id="txtDeliveryDate" value="@DateTime.Now.ToString("MM/dd/yyyy hh:mm tt")" />
                                    }
                                }

                                <span class="input-group-addon">
                                    <span class="fa fa-calendar"></span>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">PO Type</div>
                        <div class="col-sm-8">
                            <select id="txtPuchaseOrderTypeSelect" class="select2Cls form-control PuchaseOrderTypeSelect">

                                @{
                                    if (Model.PuchaseOrderType != null)
                                    {
                                        <option selected="selected" value="@Model.PuchaseOrderType.Value">@Model.PuchaseOrderType.ToString()</option>
                                        valPOType = functionsDAL.GetValueOfEnumByName("PuchaseOrderType", Model.PuchaseOrderType.ToString());

                                    }
                                    else
                                    {
                                        <option value="1" selected="selected">Local</option>

                                    }
                                }

                            </select>
                            @{
                                if (Model.PuchaseOrderType != null)
                                {

                                    <input type="hidden" id="hiddenPuchaseOrderType" name="PuchaseOrderType" value="@valPOType" />
                                }
                                else
                                {

                                    <input type="hidden" id="hiddenPuchaseOrderType" name="PuchaseOrderType" value="1" />
                                }
                            }


                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Purchase Order Image:</div>
                        <div class="col-sm-8">
                            <input type="file" name="filePurchaseOrderImage" onchange="encodeImagetoBase64(this,'imgPurchaseOrderImage')" id="filePurchaseOrderImage" data-classbutton="btn btn-default" data-classinput="form-control inline" class="form-control filestyle" />
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4"></div>
                        <div class="col-sm-8">
                            @if (Model.PurchaseOrderImage != null)
                            {
                                var base64 = Convert.ToBase64String(Model.PurchaseOrderImage);
                                var imgSrc = String.Format("data:image/gif;base64,{0}", base64);

                                <img src='@imgSrc' id="imgPurchaseOrderImage" style="display:none;width: 100%;height:250px" class="img-thumbnail img-responsive" />
                            }
                            else
                            {
                                <img id="imgPurchaseOrderImage" style="display:none;width: 100%;height:250px" class="img-thumbnail img-responsive" />
                            }

                        </div>
                    </div>
                }
            </div>
            <div class="col-md-6">
                <p class="lead bb">Supplier</p>
                @using (Html.BeginForm("", "", FormMethod.Post, new { @class = "form-horizontal p-20" }))
                {
                    <div class="form-group">
                        <div class="col-sm-4">Supplier Name</div>
                        <div class="col-sm-8">
                            <div class="input-group">
                                <a class="input-group-addon clsCursor" href="@Url.Action("Index","SupplierDefinitions")" target="_blank"><i class="fa fa-external-link"></i></a>
                                <select id="txtSupplierNameSelect" class="select2Cls form-control SupplierSelect">
                                    @{
                                        if (Model.SupplierID != null)
                                        {
                                            <option value="@Model.SupplierID">@Model.Account.AccountNo @Model.SupplierDefinition.SupplierName</option>
                                        }
                                    }
                                </select>
                                @Html.HiddenFor(model => model.SupplierID, new { @id = "hiddenSupplierID" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Account No</div>
                        <div class="col-sm-8">
                            @{
                                if (Model.AccountID != null)
                                {
                                    <input type="text" class="form-control form-control-rounded" id="hiddenAccountNo" value="@Model.Account.AccountNo" readonly="readonly" />
                                }
                                else
                                {
                                    <input type="text" class="form-control form-control-rounded" id="hiddenAccountNo" readonly="readonly" />
                                }
                            }

                            @Html.HiddenFor(model => model.AccountID, new { @id = "hiddenAccountID" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Transaction Type</div>
                        <div class="col-sm-8">
                            <select id="txtTransactionTypeSelect" class="select2Cls form-control TransactionTypeSelect">

                                @{
                                    if (Model.TransactionType != null)
                                    {
                                        <option selected="selected" value="@Model.TransactionType.Value">@Model.TransactionType.ToString()</option>
                                        valTraType = functionsDAL.GetValueOfEnumByName("TransactionType", Model.TransactionType.ToString());

                                    }
                                    else
                                    {
                                        <option value="2" selected="selected">Credit</option>

                                    }
                                }
                            </select>
                            @{
                                if (Model.TransactionType != null)
                                {

                                    <input type="hidden" id="hiddenTransactionType" name="TransactionType" value="@valTraType" />
                                }
                                else
                                {

                                    <input type="hidden" id="hiddenTransactionType" name="TransactionType" value="2" />
                                }
                            }

                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Payment Terms</div>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.PaymentTerms, new { htmlAttributes = new { @class = "form-control", @id = "txtPaymentTerms", @Placeholder = "Please Enter Payment Term" } })
                            @Html.ValidationMessageFor(model => model.PaymentTerms, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Currency</div>
                        <div class="col-sm-8">
                            <select id="txtCurrencyNameSelect" class="select2Cls form-control CurrencySelect">
                                @{
                                    if (Model.CurrencyID != null)
                                    {
                                        <option value="@Model.CurrencyID" selected="selected">@(Model.CurrencyDefinition.CurrencyName ?? String.Empty)</option>
                                    }
                                }
                            </select>
                            @Html.HiddenFor(model => model.CurrencyID, new { @id = "hiddenCurrencyID" })
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>



<div class="panel panel-default">
    <div class="panel-heading">   Product Details</div>

    <div class="panel-body">
        <div class="row mb">

            <div class="col-sm-4">
                <label>Product</label>
                <input type="text" id="txtProductName" class="form-control form-control-rounded" placeholder="Select Product" />
                <input type="hidden" id="hiddenProductID" />
                <input type="hidden" id="hiddenPurchaseOrderDetailID" />
                <input type="hidden" id="hiddencurrentRowId" />

            </div>
            <div class="col-sm-3">
                <div class="form-group">
                    <label>Payment Aging</label>
                    <div class="input-group">
                        <a class="input-group-addon clsCursor" data-toggle="modal" data-target="#paymentAgingModal" onclick="ResetPaymentAgingModel();"><i class="fa fa-plus"></i></a>
                        <select id="txtPaymentAgingSelect" class="select2Cls form-control PaymentAgingSelect">
                        </select>
                        <input type="hidden" id="hiddenAgingID" />
                    </div>
                </div>
            </div>

        </div>
        <div class="row mb">
            <div class="col-md-12">
                <table>
                    <thead>
                        <tr>
                            <th>QTY</th>
                            <th>Unit Rate</th>
                            <th>Total</th>
                            <th>Dis%</th>
                            <th>Dis UR</th>
                            <th>Dis Amount</th>
                            <th>TAD Amount</th>
                            <th>Sale Tax</th>
                            <th>Total Tax-Inclusive</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>  <input type="text" id="txtQTY" class="form-control  clsCalCulation" title="Quantity" /></td>
                            <td> <input type="text" id="txtUnitRate" class="form-control  clsCalCulation" title="Unit Rate" data-inputmask="'alias': 'numeric', 'groupSeparator': ',', 'autoGroup': true,'placeholder': '0'" /></td>
                            <td> <input type="text" id="txtTotalWOST" class="form-control " readonly="readonly" title="Total With Sale Tax" data-inputmask="'alias': 'numeric', 'groupSeparator': ',', 'autoGroup': true,'placeholder': '0'" /></td>
                            <td><input type="text" id="txtDiscountPercentage" class="form-control  clsCalCulationPercentage" title="Discounted Percentage" /></td>
                            <td> <input type="text" id="txtDiscountUnitRate" class="form-control " readonly="readonly" title="Discounted UnitRate" data-inputmask="'alias': 'numeric', 'groupSeparator': ',', 'autoGroup': true,'placeholder': '0'" /></td>
                            <td><input type="text" id="txtDiscountedAmount" class="form-control  clsCalCulationPercentage" title="Discounted Amount" data-inputmask="'alias': 'numeric', 'groupSeparator': ',', 'autoGroup': true,'placeholder': '0'" /> </td>
                            <td> <input type="text" id="txtTotalAfterDiscount" class="form-control " readonly="readonly" title="Total After Discount Amount" data-inputmask="'alias': 'numeric', 'groupSeparator': ',', 'autoGroup': true,'placeholder': '0'" /></td>
                            <td>
                                <input type="text" id="txtSaleTaxPercentage" class="form-control clsCalCulation" title="Sale Tax Percentage" />
                                <input type="hidden" id="hiddenSaleTaxAmount" />
                            </td>
                            <td> <input type="text" id="txtTotalTaxInclusive" class="form-control " readonly="readonly" title="Total Tax Inclusive" data-inputmask="'alias': 'numeric', 'groupSeparator': ',', 'autoGroup': true,'placeholder': '0'" /></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        @*<div class="row mb">
            <div class="col-md-1">
                <label title="Quantity">QTY</label>
                <input type="text" id="txtQTY" class="form-control form-control-rounded clsCalCulation" title="Quantity" />
            </div>
            <div class="col-md-1">
                <label title="Unit Rate">Unit Rate</label>
                <input type="text" id="txtUnitRate" class="form-control form-control-rounded clsCalCulation" title="Unit Rate" />
            </div>
            <div class="col-md-2">
                <label title="Total With Sale Tax">Total</label>
                <input type="text" id="txtTotalWOST" class="form-control form-control-rounded" readonly="readonly" title="Total With Sale Tax" />
            </div>

            <div class="col-md-1">
                <label title="Discounted Percentage">Dis %</label>
                <input type="text" id="txtDiscountPercentage" class="form-control form-control-rounded clsCalCulation" title="Discounted Percentage" />
            </div>
            <div class="col-md-1">
                <label title="Discounted UnitRate">Dis UR</label>
                <input type="text" id="txtDiscountUnitRate" class="form-control form-control-rounded" readonly="readonly" title="Discounted UnitRate" />
            </div>
            <div class="col-md-1">
                <label title="Discounted Amount">Dis Amount</label>
                <input type="text" id="txtDiscountedAmount" class="form-control form-control-rounded clsCalCulation" title="Discounted Amount" />
            </div>
            <div class="col-md-1">
                <label title="Discounted Amount">TAD Amount</label>
                <input type="text" id="txtTotalAfterDiscount" class="form-control form-control-rounded" readonly="readonly" title="Discounted Amount" />
            </div>
            <div class="col-md-1">
                <label title="Sale Tax Percentage">Sale Tax</label>
                <input type="text" id="txtSaleTaxPercentage" class="form-control form-control-rounded clsCalCulation" title="Sale Tax Percentage" />
                <input type="hidden" id="hiddenSaleTaxAmount" />
            </div>

            <div class="col-md-2">
                <label title="Total Tax Inclusive">Total Tax-Inclusive</label>
                <input type="text" id="txtTotalTaxInclusive" class="form-control form-control-rounded" readonly="readonly" title="Total Tax Inclusive" />
            </div>
        </div>*@
        <br />
        <div class="row">
            <div class="col-sm-2">
                <button type="button" class="btn btn-labeled btn-info" id="btnAddProduct">
                    <span class="btn-label">
                        <i class="fa fa-plus"></i>
                    </span>Add More Product
                </button>
            </div>
        </div>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">Purchase Order Details</div>
    <div class="panel-body">
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>QTY</th>
                        <th>Unit Rate</th>
                        <th>Total</th>
                        <th>Dis %</th>
                        <th>Dis UR</th>
                        <th>TAD</th>
                        <th>Dis Amt</th>
                        <th>Sale Tax</th>
                        <th>Sale Tax Amt</th>
                        <th>T Tax Inclusive</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="tblBody">
                    @{
                        foreach (var item in ViewBag.ListPurchaseOrderDetails as List<MudasirRehmanAlp.Models.PurchaseOrderDetail>)
                        {
                            counter = counter + 1;
                            <tr id="@counter">
                                <td id="tdProductName_@counter">
                                    @item.ProductDefinition.ProductBarCode @item.ProductDefinition.ProductName
                                    @{
                                        if (item.ProductDefinition.ProductModel != null)
                                        {
                                            @item.ProductDefinition.ProductModel.Name
                                        }
                                        if (item.ProductDefinition.Colour != null)
                                        {
                                            @item.ProductDefinition.Colour.Name
                                        }
                                        if (item.ProductDefinition.SizeDefinition != null)
                                        {
                                            @item.ProductDefinition.SizeDefinition.Name;
                                        }
                                    }

                                </td>
                                <td id="tdQty_@counter">@item.Quantity</td>
                                <td id="tdUnitRate_@counter" data-inputmask="'alias': 'numeric', 'groupSeparator': ',', 'autoGroup': true,'placeholder': '0'">@item.UnitRate</td>
                                <td id="tdTotalWOST_@counter">@item.TotalWithOutSaleTax</td>
                                <td id="tdDiscountPercentage_@counter">@item.DiscountPercentage</td>
                                <td id="tdDiscountUnitRate_@counter">@item.DiscountedUnitRate</td>
                                <td id="tdTotalAfterDiscount_@counter">@item.TotalAfterDiscount</td>
                                <td id="tdDiscountedAmount_@counter">@item.DiscountAmount</td>
                                <td id="tdSaleTaxPercentage_@counter">@item.SaleTaxPercentage</td>
                                <td id="tdSaleTaxAmount_@counter">@item.SaleTaxAmount</td>
                                <td id="tdTotalTaxInclusive_@counter">@item.TotalTaxInclusive</td>
                                <td>
                                    <input type="hidden" id="tdhiddenPurchaseOrderDetailID_@counter" value="@item.PurchaseOrderDetailID">
                                    <input type="hidden" id="tdhiddenProductId_@counter" value="@item.ProductID">
                                    <input type="hidden" id="tdhiddenAgingId_@counter" value="@item.AgingId">

                                    <span title="Edit" class="btn btn-primary btn-sm clsbtnEdit"><emc class="fa fa-edit"></emc> </span>
                                    <span title="Delete" class="btn btn-danger btn-sm clsbtnDelete"><emc class="fa fa-remove"></emc></span>
                                </td>
                            </tr>
                        }
                    }
                </tbody>

            </table>
        </div>
    </div>
</div>
<input type="hidden" value="@counter" id="currentRowID" />
<div class="panel m-b-xs p-a-0">
    <div class="panel-body p-t-0 p-b-0">
        <div class="row m-b-xs p-b-0">
            <div class="col-md-12">
                <label class="m-b-0 font-weight-bold" style="text-decoration:underline">General Terms & Condition</label>
            </div>
            <div class="col-sm-8 p-b-sm">
                <textarea name="TermAndCondition" class="form-control" placeholder="Please Enter Terms and Condition" style="resize:none; font-size:10px; line-height:2;" rows="5" id="TermAndCondition">
            @{
                if (Model.TermAndCondition !=null)
                {
                    @Model.TermAndCondition
                }
                } </textarea>
            </div>
            <div class="col-md-4 p-r-0 p-l-0">
                <div class="col-md-4">
                    <label class="m-b-0 small font-weight-bold">
                        Sub Total WST
                    </label>
                </div>
                <div class="col-md-8">
                    <input type="text" class="form-control" id="txtSubTotalWithSaleTax" value="@(Model.SubTotalWithSaleTax)" name="SubTotalWithSaleTax" readonly="readonly" data-inputmask="'alias': 'numeric', 'groupSeparator': ',', 'autoGroup': true,'placeholder': '0'">

                </div>
                <div class="col-md-4">
                    <label class="m-b-0 small font-weight-bold">
                        Sub Total WOST
                    </label>
                </div>
                <div class="col-md-8">
                    <input type="text" class="form-control" id="txtSubTotalWithOutSaleTax" value="@(Model.SubTotalWithOutSaleTax)" name="SubTotalWithOutSaleTax" readonly="readonly" data-inputmask="'alias': 'numeric', 'groupSeparator': ',', 'autoGroup': true,'placeholder': '0'">

                </div>

                <div class="col-md-4">
                    <label class="m-b-0 small font-weight-bold">
                        Freight Charges
                    </label>
                </div>
                <div class="col-md-8">
                    <input type="text" class="form-control ClsFreightCharges" id="txtFreightCharges" value="@(Model.FreightCharges)" name="FreightCharges" data-inputmask="'alias': 'numeric', 'groupSeparator': ',', 'autoGroup': true,'placeholder': '0'">

                </div>
                <div class="col-md-4">
                    <label class="m-b-0 small font-weight-bold">
                        Net Total
                    </label>
                </div>
                <div class="col-md-8">
                    <input type="text" class="form-control" id="txtNetTotal" name="NetTotal" value="@(Model.NetTotal)" readonly="readonly" data-inputmask="'alias': 'numeric', 'groupSeparator': ',', 'autoGroup': true,'placeholder': '0'">

                </div>
                <div class="col-md-12 m-b-xs">
                    @Html.EditorFor(model => model.AmountInWord, new { htmlAttributes = new { @tabindex = "34", @class = "form-control AmountInWord", @id = "txtAmountInWord", @readonly = "readonly", @placeholder = "Amount in word" } })
                    @Html.ValidationMessageFor(model => model.AmountInWord, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
</div>
<div class="panel">

    <div class="panel-footer">

        <button type="submit" class="btn btn-success" title="Update" id="btnSubmit"> Update &nbsp;<em class="fa fa-edit"></em></button>
        <a href="@Url.Action("Index")" title="Back to List" class="btn btn-default">Back to List &nbsp;<em class="fa fa-backward"></em></a>
    </div>
</div>

@section Styles {

    @Styles.Render("~/bundles/datetimePickerCss")
    @Styles.Render("~/bundles/select2Css")
    @Styles.Render("~/bundles/autocompleteCss")
    <style>
        .ui-autocomplete {
            position: absolute;
            cursor: default;
            z-index: 1001 !important
        }
    </style>
}
@section Scripts {
    @Scripts.Render("~/bundles/moment")
    @Scripts.Render("~/bundles/select2")
    @Scripts.Render("~/bundles/datetimePicker")
    @Scripts.Render("~/bundles/demoForms")
    @Scripts.Render("~/bundles/inputmask")
    @Scripts.Render("~/bundles/autocomplete")
    @Scripts.Render("~/bundles/filestyle")

    <script>
        $(document).ready(function () {
             var message = '@(TempData["ErrorMessage"])';
            var Validation = '@(TempData["Validation"])';
            showMessage(message, Validation);
            LoadCurrencyDefinitionsByOrgId(@Model.CurrencyID);
            LoadSupplierDefinitions(@Model.SupplierID);
            ProductLoad();
            LoadTransactionType(@valTraType);
            LoadPuchaseOrderType(@valPOType);
            LoadPaymentAgingsCode('');
             //---------- Permission Code
              var rName = 'PurchaseOrders';
              var id = '@Model.PurchaseOrderId';
              PagePermission(rName, id);
            //---------------
             var OrganizationID = $("#hiddenOrganizationID").val();
            $(".PaymentAgingSelect").change(function () {
                var Name = $(this).children("option:selected").text();
                var ID = $(this).children("option:selected").val();
                $("#hiddenAgingID").val(ID);
            });
              $(".SupplierSelect").change(function () {
                var Name = $(this).children("option:selected").text();
                var ID = $(this).children("option:selected").val();
                $("#hiddenSupplierID").val(ID);
                     LoadAccountDetails(ID);
              });
             $(".PuchaseOrderTypeSelect").change(function () {
                var Name = $(this).children("option:selected").text();
                var ID = $(this).children("option:selected").val();
                $("#hiddenPuchaseOrderType").val(ID);

             });
             $(".TransactionTypeSelect").change(function () {
                var Name = $(this).children("option:selected").text();
                var ID = $(this).children("option:selected").val();
                $("#hiddenTransactionType").val(ID);
             });
             $(".CurrencySelect").change(function () {
                var Name = $(this).children("option:selected").text();
                var ID = $(this).children("option:selected").val();
                $("#hiddenCurrencyID").val(ID);
             });
              $(".ClsFreightCharges").keyup(function () {
                  CalculateNetTotal();
            });

            $("#btnAddProduct").click(function () {
                debugger
                var row = $("#currentRowID").val();

                var PurchaseOrderDetailID = $("#hiddenPurchaseOrderDetailID").val();
                var ProductId = $("#hiddenProductID").val();
                var AgingId = $("#hiddenAgingID").val();
                var ProductName = $("#txtProductName").val();
                var Qty = $("#txtQTY").val();
                var UnitRate = $("#txtUnitRate").val();
                var TotalWOST = $("#txtTotalWOST").val();
                var DiscountPercentage = $("#txtDiscountPercentage").val();
                var DiscountUnitRate = $("#txtDiscountUnitRate").val();
                var TotalAfterDiscount = $("#txtTotalAfterDiscount").val();
                var DiscountedAmount = $("#txtDiscountedAmount").val();
                var SaleTaxPercentage = $("#txtSaleTaxPercentage").val();
                var SaleTaxAmount = $("#hiddenSaleTaxAmount").val();
                var TotalTaxInclusive = $("#txtTotalTaxInclusive").val();

                if (ProductId == "") {
                    toastr.error("Product name is required", "Required Field");
                    return false;
                }
                if (Qty == "" || Qty==0) {
                    toastr.error("QTY is required", "Required Field");
                    return false;
                }
                if (UnitRate == "" || UnitRate==0) {
                    toastr.error("Unit Rate is required", "Required Field");
                    return false;
                }

                var currentRowId = $("#hiddencurrentRowId").val();
                if (currentRowId != undefined && currentRowId != "") {
                    row = currentRowId;
                    $("#hiddencurrentRowId").val('');
                }
                else {
                    row = isNaN(parseInt(row)) ? 0 : parseInt(row)
                    row = row + 1;
                    $("#currentRowID").val(row);
                }

                $("#tblBody").append("<tr id='" + row + "'><td id='tdProductName_" + row + "'>" + ProductName + "</td><td id='tdQty_" + row + "'>" + Qty + "</td><td id='tdUnitRate_" + row + "'>" + UnitRate + "</td><td id='tdTotalWOST_" + row + "'>" + TotalWOST + "</td><td id='tdDiscountPercentage_" + row + "'>" + DiscountPercentage + "</td><td id='tdDiscountUnitRate_" + row + "'>" + DiscountUnitRate + "</td><td id='tdTotalAfterDiscount_" + row + "'>" + TotalAfterDiscount + "</td><td id='tdDiscountedAmount_" + row + "'>" + DiscountedAmount + "</td><td id='tdSaleTaxPercentage_" + row + "'>" + SaleTaxPercentage + "</td><td id='tdSaleTaxAmount_" + row + "'>" + SaleTaxAmount + "</td><td id='tdTotalTaxInclusive_" + row + "'>" + TotalTaxInclusive + "</td><td><input type='hidden' id='tdhiddenPurchaseOrderDetailID_" + row + "' value='" + PurchaseOrderDetailID + "'><input type='hidden' id='tdhiddenProductId_" + row + "' value='" + ProductId + "'><input type='hidden' id='tdhiddenAgingId_" + row + "' value='" + AgingId + "'><span title='Edit' class='btn btn-primary btn-sm clsbtnEdit'><emc class='fa fa-edit'></emc> </span>  <span title='Delete' class='btn btn-danger btn-sm clsbtnDelete'><emc class='fa fa-remove'></emc></span></td></tr>");


                $("#txtPaymentAgingSelect").val('').trigger('change');
                $("#hiddenProductID").val('');
                $("#hiddenAgingID").val('');
                $("#txtProductName").val('');
                $("#txtQTY").val('0');
                $("#txtUnitRate").val('0.0');
                $("#txtTotalWOST").val('0.0');
                $("#txtDiscountPercentage").val('0.0');
                $("#txtDiscountUnitRate").val('0.0');
                $("#txtTotalAfterDiscount").val('0.0');
                $("#txtDiscountedAmount").val('0.0');
                $("#txtSaleTaxPercentage").val('0.0');
                $("#hiddenSaleTaxAmount").val('0.0');
                $("#txtTotalTaxInclusive").val('0.0');

               CalculateNetTotal();
            });
            $("#tblBody").on('click', '.clsbtnEdit', function () {
                debugger
                var trID = $(this).closest('tr').attr('id');
                $("#hiddencurrentRowId").val(trID);
                var PurchaseOrderDetailID = $("#tdhiddenPurchaseOrderDetailID_" + trID).val();
                var ProductId = $("#tdhiddenProductId_" + trID).val();
                var AgingId = $("#tdhiddenAgingId_" + trID).val();
                var ProductName = $("#tdProductName_" + trID).html();
                var Qty = $("#tdQty_" + trID).html();
                var UnitRate = $("#tdUnitRate_" + trID).html();
                var TotalWOST = $("#tdTotalWOST_" + trID).html();
                var DiscountPercentage = $("#tdDiscountPercentage_" + trID).html();
                var DiscountUnitRate = $("#tdDiscountUnitRate_" + trID).html();
                var TotalAfterDiscount = $("#tdTotalAfterDiscount_" + trID).html();
                var DiscountedAmount = $("#tdDiscountedAmount_" + trID).html();
                var SaleTaxPercentage = $("#tdSaleTaxPercentage_" + trID).html();
                var SaleTaxAmount = $("#tdSaleTaxAmount_" + trID).html();
                var TotalTaxInclusive = $("#tdTotalTaxInclusive_" + trID).html();


                $("#txtPaymentAgingSelect").val(AgingId).trigger('change');
                $("#hiddenAgingID").val(AgingId);
                $("#hiddenPurchaseOrderDetailID").val(PurchaseOrderDetailID);
                $("#hiddenProductID").val(ProductId);
                if (ProductName !== "") {
                    $("#txtProductName").val(ProductName.trim());
                }
                else {
                    $("#txtProductName").val(ProductName);
                }
                
                $("#txtQTY").val(Qty);
                $("#txtUnitRate").val(UnitRate);
                $("#txtTotalWOST").val(TotalWOST);
                $("#txtDiscountPercentage").val(DiscountPercentage);
                $("#txtDiscountUnitRate").val(DiscountUnitRate);
                $("#txtTotalAfterDiscount").val(TotalAfterDiscount);
                $("#txtDiscountedAmount").val(DiscountedAmount);
                $("#txtSaleTaxPercentage").val(SaleTaxPercentage);
                $("#hiddenSaleTaxAmount").val(SaleTaxAmount);
                $("#txtTotalTaxInclusive").val(TotalTaxInclusive);


                //var row = $("#currentRowID").val();
                //row = row - 1;
                //$("#currentRowID").val(row);
                $(this).closest('tr').remove();


            });
            $("#tblBody").on('click', '.clsbtnDelete', function () {
                var trID = $(this).closest('tr').attr('id');
                  var PurchaseOrderDetailID = $("#tdhiddenPurchaseOrderDetailID_" + trID).val();
                if (PurchaseOrderDetailID != "" && PurchaseOrderDetailID != undefined) {
              var row = $("#currentRowID").val();
                row = row - 1;
                $("#currentRowID").val(row);
                var Result = confirm('Are you sure you want to delete this item?');
                if (Result == true) {
                    var resourceUrl = "/PurchaseOrders/DeletePurchaseOrderDetailSingle";
                    $.ajax({
                        type: "POST",
                        url: resourceUrl,
                        data: JSON.stringify({ ID: PurchaseOrderDetailID }),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        cache: false,
                        async: false,
                        success: function (url) {
                            CalculateNetTotal();
                            location.reload();


                        },
                        error: function () {
                        }
                    });
                }



            }
            else {
                 var row = $("#currentRowID").val();
                row = row - 1;
                $("#currentRowID").val(row);
                $(this).closest('tr').remove();
            }


            });
            $(".clsCalCulation").keyup(function () {
                debugger
                var Qty = $("#txtQTY").val();
                var URWST = removeCommas($("#txtUnitRate").val());
                var URWOST = removeCommas($("#txtURWOST").val());
                CalOnFocuOut(Qty, URWST, URWOST);
                CalculateDiscount();
                CalculateSaleTax();
            });
            $(".clsCalCulationPercentage").focusout(function () {
                debugger
                CalculateDiscount();
            });
            //btn Save Purchase Order
            $("#btnSubmit").click(function () {
                debugger
                var ItemCount = $("#currentRowID").val();

                var POMaltipleChildItem = new Array();
                var POMasterItem = {};
                var POChildItem = {};
                var formData = new FormData();
                var PODetailsID = "0";
                var IdFiles = document.getElementById("filePurchaseOrderImage").files.length;

                for (var i = 0; i < IdFiles; i++) {
                    var file_id = document.getElementById("filePurchaseOrderImage").files[i];
                    formData.append("uploadPurchaseOrderImage", file_id);
                }
                POMasterItem = {
                    PurchaseOrderId: $("#hiddenPurchaseOrderId").val(),
                    OrganizationID: $("#hiddenOrganizationID").val(),
                    BranchId: $("#hiddenBranchId").val(),
                    SupplierID: $("#hiddenSupplierID").val(),
                     AccountID: $("#hiddenAccountID").val(),
                    CurrencyID: $("#hiddenCurrencyID").val(),
                    PurchaseOrderNO: $("#txtPONO").val(),
                    PuchaseOrderType: $("#hiddenPuchaseOrderType").val(),
                    PurchaseOrderDate: $("#txtPODte").val(),
                    TransactionType: $("#hiddenTransactionType").val(),
                    PaymentTerms: $("#txtPaymentTerms").val(),
                    DeliveryDate: $("#txtDeliveryDate").val(),
                    SubTotalWithOutSaleTax: removeCommas($("#txtSubTotalWithOutSaleTax").val()),
                    SubTotalWithSaleTax: removeCommas($("#txtSubTotalWithSaleTax").val()),
                    FreightCharges: removeCommas($("#txtFreightCharges").val()),
                    NetTotal: removeCommas($("#txtNetTotal").val()),
                    AmountInWord: $("#txtAmountInWord").val(),
                    TermAndCondition: $("#TermAndCondition").val(),
                }

                for (var i = 1; i <= ItemCount; i++) {

                        var Id = $("#tdhiddenPurchaseOrderDetailID_" + i).val();
                        if (Id != "" && Id != undefined) {
                            PODetailsID = Id;
                        }
                        else {
                            PODetailsID = "0";
                        }
                        POChildItem = {
                        PurchaseOrderDetailID:PODetailsID ,
                            ProductID: $("#tdhiddenProductId_" + i).val(),
                            AgingId: $("#tdhiddenAgingId_" + i).val(),
                        Quantity: $("#tdQty_" + i).html(),
                            UnitRate: removeCommas($("#tdUnitRate_" + i).html()),
                            TotalWithOutSaleTax: removeCommas($("#tdTotalWOST_" + i).html()),
                            DiscountPercentage: removeCommas($("#tdDiscountPercentage_" + i).html()),
                            DiscountAmount: removeCommas($("#tdDiscountedAmount_" + i).html()),
                            DiscountedUnitRate: removeCommas($("#tdDiscountUnitRate_" + i).html()),
                            TotalAfterDiscount: removeCommas($("#tdTotalAfterDiscount_" + i).html()),
                            SaleTaxPercentage: removeCommas($("#tdSaleTaxPercentage_" + i).html()),
                            SaleTaxAmount: removeCommas($("#tdSaleTaxAmount_" + i).html()),
                            TotalTaxInclusive: removeCommas($("#tdTotalTaxInclusive_" + i).html()),
                    }
                    POMaltipleChildItem.push(POChildItem);

                }
                var master = JSON.stringify(POMasterItem);
                var child = JSON.stringify(POMaltipleChildItem);


                formData.append("ObjMasterItem", master);
                formData.append("ObjChilds", child);

                if (POMaltipleChildItem.length > 0) {
                    $.ajax({
                        type: "POST",
                        url: "/PurchaseOrders/Edit",
                        data: formData,
                        dataType: 'json',
                        contentType: false,
                        processData: false,
                        async: false,
                        success: function (success) {
                              if (success == 'OK') {
                                window.location.href = "@Url.Action("Index")";
                            }
                            else {
                                toastr.error("Internal server error." + success, "Server Error");
                            }
                        },
                        error: function (error) {
                            fullAppLoaderFadeOut();
                            toastr.error("Internal server error.Something went wrong" + error, "Server Error");
                        }
                    });

                }
                else {
                     fullAppLoaderFadeOut();
                    toastr.error("Please enter correct data.Something went wrong", "Error");
                }
            });//End oF btn Submit

        });//end of Ready Funtion


        function CalculateDiscount() {
            debugger
            var DiscountAmount = removeCommas($("#txtDiscountedAmount").val());
            var Discount = $("#txtDiscountPercentage").val();

            var Total = removeCommas($("#txtTotalWOST").val());
            var UnitRate = removeCommas($("#txtUnitRate").val());
            var Quantity = $("#txtQTY").val();
            var DisUnitTemp = 0;

            DiscountAmount = isNaN(parseFloat(DiscountAmount)) ? 0 : parseFloat(DiscountAmount)
            Discount = isNaN(parseFloat(Discount)) ? 0 : parseFloat(Discount)
            Total = isNaN(parseFloat(Total)) ? 0 : parseFloat(Total)
            UnitRate = isNaN(parseFloat(UnitRate)) ? 0 : parseFloat(UnitRate)
            Quantity = isNaN(parseFloat(Quantity)) ? 0 : parseFloat(Quantity)
            if (DiscountAmount != 0) {
                var subtotal = Total - DiscountAmount;
                subtotal = (subtotal / Total) * 100;
                var DiscountPercentage = 100 - subtotal;
                var TotalAfterDiscount = Total - DiscountAmount;
                DiscountPercentage = isNaN(parseFloat(DiscountPercentage)) ? 0 : parseFloat(DiscountPercentage)
                TotalAfterDiscount = isNaN(parseFloat(TotalAfterDiscount)) ? 0 : parseFloat(TotalAfterDiscount)
                DisUnitTemp = TotalAfterDiscount / Quantity;
                DisUnitTemp = isNaN(parseFloat(DisUnitTemp)) ? 0 : parseFloat(DisUnitTemp)

                $("#txtTotalAfterDiscount").val(TotalAfterDiscount.toFixed(2));
                $("#txtDiscountPercentage").val(DiscountPercentage.toFixed(2));
                $("#txtDiscountUnitRate").val(DisUnitTemp.toFixed(2));
            }
            else if (Discount <= 99) {
                Discount = parseFloat(Discount);
                var DiscountAmount = (Total * Discount) / 100;
                var TotalAfterDiscount = Total - DiscountAmount;

                DisUnitTemp = TotalAfterDiscount / Quantity;
                DisUnitTemp = isNaN(parseFloat(DisUnitTemp)) ? 0 : parseFloat(DisUnitTemp)

                $("#txtDiscountedAmount").val(DiscountAmount.toFixed(2));
                $("#txtTotalAfterDiscount").val(TotalAfterDiscount.toFixed(2));
                $("#txtDiscountUnitRate").val(DisUnitTemp.toFixed(2));
            }
            else {
                toastr.warning("Discount Percentage shloud be less then of 100%.", "Warning");
            }
        }
        function CalOnFocuOut(Qty, URWST, URWOST) {
            debugger
            var Total = 0;
            var GrandTotal = 0;
            var TotalWST = 0;
            var TotalWOST = 0;
            Qty = isNaN(parseInt(Qty)) ? 0 : parseInt(Qty)
            URWST = isNaN(parseInt(URWST)) ? 0 : parseInt(URWST)
            TotalWST = Qty * URWST;
            URWOST = isNaN(parseInt(URWOST)) ? 0 : parseInt(URWOST)
            TotalWOST = Qty * URWOST;
            Total = TotalWST;
            $("#txtTotalWOST").val(TotalWST.toFixed(2));
            $("#txtTotalTaxInclusive").val(Total.toFixed(2));
        }
        function CalculateSaleTax() {
            debugger
            var SaleTax = $("#txtSaleTaxPercentage").val();
            var TotalAfterDiscount = removeCommas($("#txtTotalAfterDiscount").val());
            SaleTax = isNaN(parseFloat(SaleTax)) ? 0 : parseFloat(SaleTax)
            TotalAfterDicount = isNaN(parseFloat(TotalAfterDiscount)) ? 0 : parseFloat(TotalAfterDiscount)

            var SaleTaxAmount = (TotalAfterDiscount * SaleTax) / 100;
            $("#hiddenSaleTaxAmount").val(SaleTaxAmount.toFixed(2));
            CalculateTotal();
        }
        function CalculateTotal() {
            debugger
            var SaleTaxAmount = removeCommas($("#hiddenSaleTaxAmount").val());
            var DiscountAmount = removeCommas($("#txtDiscountedAmount").val());
            var Total = removeCommas($("#txtTotalWOST").val());
            SaleTaxAmount = isNaN(parseFloat(SaleTaxAmount)) ? 0 : parseFloat(SaleTaxAmount)
            DiscountAmount = isNaN(parseFloat(DiscountAmount)) ? 0 : parseFloat(DiscountAmount)
            Total = isNaN(parseFloat(Total)) ? 0 : parseFloat(Total)

            SaleTaxAmount = parseFloat(SaleTaxAmount);
            DiscountAmount = parseFloat(DiscountAmount);
            Total = parseFloat(Total);
            var SubNetTotal = Total - DiscountAmount + SaleTaxAmount;
            $("#txtTotalTaxInclusive").val(SubNetTotal.toFixed(2));

            CalculateNetTotal();

        }
        function CalculateNetTotal() {
            debugger
            var RowCount = $("#currentRowID").val();
            var SubWithSaleTaxTotal = 0;
            var SubWithOutSaleTaxTotal = 0;
            var NetTotal = 0;
            var TotalofNetTotal = 0;


            for (i = 1; i <= RowCount; i++) {

                var ItemNetTotalWST = removeCommas($("#tdTotalTaxInclusive_" + i).html());
                var ItemTotalWOST = removeCommas($("#tdTotalWOST_" + i).html());
                ItemNetTotalWST = isNaN(parseFloat(ItemNetTotalWST)) ? 0 : parseFloat(ItemNetTotalWST);
                ItemTotalWOST = isNaN(parseFloat(ItemTotalWOST)) ? 0 : parseFloat(ItemTotalWOST);

                SubWithOutSaleTaxTotal += ItemTotalWOST;
                SubWithSaleTaxTotal += ItemNetTotalWST;
                NetTotal = SubWithSaleTaxTotal;


            }
            TotalofNetTotal = NetTotal;
            var FreightCharges = removeCommas($("#txtFreightCharges").val());
            FreightCharges = isNaN(parseFloat(FreightCharges)) ? 0 : parseFloat(FreightCharges);
            TotalofNetTotal += FreightCharges;



            $("#txtSubTotalWithSaleTax").val(SubWithSaleTaxTotal.toFixed(2));
            $("#txtSubTotalWithOutSaleTax").val(SubWithOutSaleTaxTotal.toFixed(2));
            $("#txtFreightCharges").val(FreightCharges.toFixed(0));
            $("#txtNetTotal").val(TotalofNetTotal.toFixed(2));

            $("#txtAmountInWord").val(null);
            var url = "/Json/AmountInWord";
            var amount = removeCommas($("#txtNetTotal").val());
            $.get(url, { label: amount, },
                function (Data) {
                    $("#txtAmountInWord").val(Data);
                });
        }

          function LoadAccountDetails(Id) {
            var url = "/PurchaseOrders/CheckAccountNoInSupplier";
            var url2 = "/PurchaseOrders/LoadAccountNo";
             $.get(url, { ID: Id, },
                function (Data) {
                    debugger
                    if (Data != "Yes") {
                        var message = 'Account not define.Please define account of this supplier ';
                        var Validation = 'False';
                        showMessage(message, Validation);
                         $("#hiddenAccountNo").val('');
                        $("#hiddenAccountID").val('');
                    }
                    else {
                        $.get(url2, { ID: Id, },
                        function (Data) {
                    debugger
                    if (Data != "") {

                        $("#hiddenAccountNo").val(Data.AccountNo);
                        $("#hiddenAccountID").val(Data.AccountId);
                    }

                });
                    }
                });

        }
    </script>
}
