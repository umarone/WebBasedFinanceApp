@model MudasirRehmanAlp.Models.ProductDefinition
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="panel panel-default">
    <div class="panel-heading">Product Definitions</div>
    @using (Html.BeginForm("Edit", "ProductDefinitions", null, FormMethod.Post, new { enctype = "multipart/form-data", @id = "form_Create_Update", @class = "form-horizontal p-20" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.ProductId)
        <div class="panel-body">
            <div>
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="col-sm-4">Code</div>
                        <div class="col-sm-8">
                            <strong>@Model.ProductCode</strong>
                            @Html.HiddenFor(model => model.ProductCode)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Organization Name</div>
                        <div class="col-sm-8">
                            <strong>@(Model.OrganizationDefinition.OrganizationUnitName ?? String.Empty)</strong>
                            @Html.HiddenFor(model => model.OrganizationID, new { @id = "hiddenOrganizationID" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Branch Name</div>
                        <div class="col-sm-8">
                            <strong>@(Model.BranchDefinition.Name ?? String.Empty)</strong>
                            @Html.HiddenFor(model => model.BranchId, new { @id = "hiddenBranchId" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Bar Code</div>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.ProductBarCode, new { htmlAttributes = new { @class = "form-control form-control-rounded" } })
                            @Html.ValidationMessageFor(model => model.ProductBarCode, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Unique Code</div>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.UniqueCode, new { htmlAttributes = new { @class = "form-control form-control-rounded" } })
                            @Html.ValidationMessageFor(model => model.UniqueCode, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Product Name</div>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control form-control-rounded" } })
                            @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Remarks</div>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control form-control-rounded" } })
                            @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Status</div>
                        <div class="col-sm-8">
                            <div class="form-group">
                                <label class="radio-inline c-radio">
                                    @Html.RadioButton("IsActive", "true", new { @checked = "checked", @type = "radio" })  <span class="fa fa-check"></span> Yes &nbsp; &nbsp; &nbsp;
                                </label>
                                <label class="radio-inline c-radio">
                                    @Html.RadioButton("IsActive", "false", new { @type = "radio" }) <span class="fa fa-remove"></span> No
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">

                    <div class="form-group">
                        <div class="col-sm-4">Category Name</div>
                        <div class="col-sm-8">
                            <div class="input-group">
                                <a class="input-group-addon clsCursor" data-toggle="modal" data-target="#categoryModal" onclick="ResetCategoryModel();"><i class="fa fa-plus"></i></a>
                                <select id="txtCategoryNameSelect" class="select2Cls form-control CategorySelect">
                                    @{
                                        if (Model.CategoryID != null)
                                        {
                                            <option value="@Model.CategoryID">@Model.CategoryDefinition.CategoryName</option>
                                        }

                                    }
                                </select>
                                @Html.HiddenFor(model => model.CategoryID, new { @id = "hiddenCategoryID" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Manufacture Name</div>
                        <div class="col-sm-8">
                            <div class="input-group">
                                <a class="input-group-addon clsCursor" data-toggle="modal" data-target="#manufactureModal" onclick="ResetManufactureModel();"><i class="fa fa-plus"></i></a>
                                <select id="txManufactureNameSelect" class="select2Cls form-control ManufactureSelect">
                                    @{
                                        if (Model.ManufacturerID != null)
                                        {
                                            <option value="@Model.ManufacturerID">@Model.ManufactureDefinition.ManufactureName</option>
                                        }

                                    }
                                </select>
                                @Html.HiddenFor(model => model.ManufacturerID, new { @id = "hiddenManufacturerID" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Model Name</div>
                        <div class="col-sm-8">
                            <div class="input-group">
                                <a class="input-group-addon clsCursor" data-toggle="modal"  onclick="ResetProductModel();"><i class="fa fa-plus"></i></a>
                                <select id="txtModelNameSelect" class="select2Cls form-control ModelSelect">
                                    @{
                                        if (Model.ModelId != null)
                                        {
                                            <option value="@Model.ModelId">@Model.ProductModel.Name</option>
                                        }

                                    }
                                </select>
                                @Html.HiddenFor(model => model.ModelId, new { @id = "hiddenModelId" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Colour Name</div>
                        <div class="col-sm-8">
                            <div class="input-group">
                                <a class="input-group-addon clsCursor" data-toggle="modal" data-target="#colourModal" onclick="ResetColourModel();"><i class="fa fa-plus"></i></a>
                                <select id="txtColourNameSelect" class="select2Cls form-control ColourSelect">
                                    @{
                                        if (Model.ColourId != null)
                                        {
                                            <option value="@Model.ColourId">@Model.Colour.Name</option>
                                        }

                                    }
                                </select>
                                @Html.HiddenFor(model => model.ColourId, new { @id = "hiddenColourId" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-sm-4">Size Name</div>
                        <div class="col-sm-8">
                            <div class="input-group">
                                <a class="input-group-addon clsCursor" data-toggle="modal" data-target="#sizeModal" onclick="ResetSizeModel();"><i class="fa fa-plus"></i></a>
                                <select id="txtSizeNameSelect" class="select2Cls form-control SizeSelect">
                                    @{
                                        if (Model.SizeId != null)
                                        {
                                            <option value="@Model.SizeId">@Model.SizeDefinition.Name</option>
                                        }

                                    }
                                </select>
                                @Html.HiddenFor(model => model.SizeId, new { @id = "hiddenSizeId" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Size  Specification</div>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.Specification1, new { htmlAttributes = new { @class = "form-control form-control-rounded" } })
                            @Html.ValidationMessageFor(model => model.Specification1, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Main Specification</div>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.MainSpecification, new { htmlAttributes = new { @class = "form-control form-control-rounded" } })
                            @Html.ValidationMessageFor(model => model.MainSpecification, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4">Product Image</div>
                        <div class="col-sm-8">
                            <input type="file" name="fileProductImage" onchange="encodeImagetoBase64(this,'imgProductImage')" id="fileProductImage" data-classbutton="btn btn-default" data-classinput="form-control inline" class="form-control filestyle" />
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-4"></div>
                        <div class="col-sm-8">
                            @if (Model.ProductImage != null)
                            {
                                var base64 = Convert.ToBase64String(Model.ProductImage);
                                var imgSrc = String.Format("data:image/gif;base64,{0}", base64);

                                <img src='@imgSrc' id="imgProductImage" style="width: 100%;height:250px" class="img-thumbnail img-responsive" />
                            }
                            else
                            {
                                <img id="imgProductImage" style="display:none;width: 100%;height:250px" class="img-thumbnail img-responsive" />
                            }

                        </div>
                    </div>
                </div>

            </div>
            <div class="row">

                <div class="col-lg-2">
                    <!-- START widget-->
                    <div class="panel widget">

                    </div>
                    <!-- END widget-->
                </div>
            </div>


        </div>
        <div class="panel-footer">
            <button type="button" class="btn btn-success" title="Update" onclick="SaveProductCommon();"> Update &nbsp;<em class="fa fa-edit"></em></button>
            <a href="@Url.Action("Index")" title="Back to List" class="btn btn-default">Back to List &nbsp;<em class="fa fa-backward"></em></a>
        </div>
    }
</div>
@section BodyArea {
    @{
        Html.RenderPartial("_Colour");
        Html.RenderPartial("_ProductModel");
        Html.RenderPartial("_Size");
        Html.RenderPartial("_Category");
        Html.RenderPartial("_Manufacture");
    }
}
@section Styles {

    @Styles.Render("~/bundles/select2Css")
}
@section Scripts {
    @Scripts.Render("~/bundles/filestyle")
    @Scripts.Render("~/bundles/select2")
    @Scripts.Render("~/bundles/ModalJs")
    @Scripts.Render("~/bundles/ProductsJs")
<script>
        $(document).ready(function () {
         var message = '@(TempData["ErrorMessage"])';
        var Validation = '@(TempData["Validation"])';
            showMessage(message, Validation)

            LoadCategoryDefinitionsCode(@Model.CategoryID);
            LoadManufactureByCategory(@Model.CategoryID,@Model.ManufacturerID);
            LoadProductModelsByManufacture(@Model.ManufacturerID,@Model.ModelId);
            LoadColourCode(@Model.ColourId);
            LoadSizeDefinitionsCode(@Model.SizeId);
               //---------- Permission Code
              var rName = 'ProductDefinitions';
              var id = '@Model.ProductId';
              PagePermission(rName, id);
            //---------------
           
            $(".CategorySelect").change(function () {
                debugger
                var Name = $(this).children("option:selected").text();
                var ID = $(this).children("option:selected").val();
                $("#hiddenCategoryID").val(ID);
                if (ID != "") {
                    LoadManufactureByCategory(ID, '');
                    $("#hiddenManufacturerID").val('');
                }
                else {
                    $("#hiddenManufacturerID").val('');
                }
            });
            $(".ManufactureSelect").change(function () {
                var Name = $(this).children("option:selected").text();
                var ID = $(this).children("option:selected").val();
                $("#hiddenManufacturerID").val(ID);
                if (ID != "") {
                    LoadProductModelsByManufacture(ID, '');
                    $("#hiddenModelId").val('');
                }
                else {
                    $("#hiddenModelId").val('');
                }
            });
            $(".ModelSelect").change(function () {
                var Name = $(this).children("option:selected").text();
                var ID = $(this).children("option:selected").val();
                $("#hiddenModelId").val(ID);
            });
            $(".ColourSelect").change(function () {
                var Name = $(this).children("option:selected").text();
                var ID = $(this).children("option:selected").val();
                $("#hiddenColourId").val(ID);
            });
           
            $(".SizeSelect").change(function () {
                var Name = $(this).children("option:selected").text();
                var ID = $(this).children("option:selected").val();
                $("#hiddenSizeId").val(ID);
            });
        });//end of Ready Funtion

</script>
}
