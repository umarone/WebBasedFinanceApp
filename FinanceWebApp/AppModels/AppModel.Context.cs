//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MudasirRehmanAlp.AppModels
{
    using MudasirRehmanAlp.Models;
    using MudasirRehmanAlp.Models.StoredPocedureModel;
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.ModelConfiguration.Conventions;
    using System.Data.SqlClient;
    using System.Linq;

    public partial class AppEntities : DbContext
    {
        public AppEntities()
            : base("name=AppEntities")
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();

        }

        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<Menu> Menu { get; set; }

        public DbSet<CityDefinition> CityDefinitions { get; set; }

        public DbSet<Customer> Customers { get; set; }

        public DbSet<GuarantorDefinition> GuarantorDefinitions { get; set; }

        public DbSet<ManufactureDefinition> ManufactureDefinitions { get; set; }

        public DbSet<ProductDefinition> ProductDefinitions { get; set; }
        public DbSet<SizeDefinition> SizeDefinitions { get; set; }
        public DbSet<Colour> Colours { get; set; }
        public DbSet<ProductModel> ProductModels { get; set; }
        public DbSet<PaymentAging> PaymentAgings { get; set; }


        public DbSet<SupplierDefinition> SupplierDefinitions { get; set; }
        public DbSet<EmployeeOfficialDetails> EmployeeOfficiallDetails { get; set; }

        public DbSet<DepartmentDefinition> DepartmentDefinitions { get; set; }

        public DbSet<DesignationDefinition> DesignationDefinitions { get; set; }

        public DbSet<AreaDefinition> AreaDefinitions { get; set; }

        public DbSet<CountryDefinition> CountryDefinitions { get; set; }

        public DbSet<ProvinceDefinition> ProvinceDefinitions { get; set; }

        public DbSet<OrganizationDefinition> OrganizationDefinitions { get; set; }
        public DbSet<BranchDefinition> BranchDefinitions { get; set; }
        public DbSet<BranchesRights> BranchesRights { get; set; }
        public DbSet<RegionDefinition> RegionDefinitions { get; set; }

        public DbSet<CategoryDefinition> CategoryDefinitions { get; set; }
        public DbSet<CurrencyDefinition> CurrencyDefinitions { get; set; }

        public DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }
        public DbSet<StockofGoods> StockofGoods { get; set; }

        public DbSet<GoodReceived> GoodReceiveds { get; set; }
        public DbSet<GoodReceivedDetail> GoodReceivedDetails { get; set; }

        public DbSet<EmployeePersonalDetails> EmployeePersonalDetails { get; set; }
        public DbSet<Users> Users { get; set; }
        public DbSet<Roles> Roles { get; set; }
        public DbSet<UsersRole> UsersRole { get; set; }

        public DbSet<PurchaseOrderReturn> PurchaseOrderReturns { get; set; }
        public DbSet<PurchaseOrderReturnDetail> PurchaseOrderReturnDetails { get; set; }

        public DbSet<GoodReceivedReturn> GoodReceivedReturns { get; set; }
        public DbSet<GoodReceivedReturnDetail> GoodReceivedReturnDetails { get; set; }
        public DbSet<AdjustmentNote> AdjustmentNotes { get; set; }
        public DbSet<AdjustmentNoteDetail> AdjustmentNoteDetails { get; set; }
        public DbSet<DistributorDefinition> DistributorDefinitions { get; set; }

        public DbSet<SaleOrder> SaleOrders { get; set; }
        public DbSet<SaleOrderDetail> SaleOrderDetails { get; set; }

        public DbSet<SaleInvoice> SaleInvoices { get; set; }
        public DbSet<SaleInvoiceDetail> SaleInvoiceDetails { get; set; }

        public DbSet<Account> Accounts { get; set; }
        public DbSet<AccountMapping> AccountMapping { get; set; }

        public DbSet<AccountSystemList> AccountSystemList { get; set; }

        public DbSet<SaleReturnNote> SaleReturnNotes { get; set; }
        public DbSet<SaleReturnNoteDetail> SaleReturnNoteDetails { get; set; }

        public DbSet<VouchersHead> VouchersHeads { get; set; }
        public DbSet<VouchersDetail> VouchersDetails { get; set; }
        public DbSet<OpeningBalance> OpeningBalance { get; set; }
        public DbSet<TransactionsDetail> TransactionsDetails { get; set; }

        public DbSet<FinancialBookYear> FinancialBookYears { get; set; }
        public DbSet<UsersBaseMenusRight> UsersBaseMenusRights { get; set; }
        public DbSet<MailSetting> MailSettings { get; set; }
        public DbSet<CustomerStatement> CustomerStatements { get; set; }
        public DbSet<GeneralSetting> GeneralSettings { get; set; }
        public DbSet<PaymentMaster> PaymentMasters { get; set; }
        public DbSet<InstallmentsPaymentsScheduler> InstallmentsPaymentsSchedulers { get; set; }
        public DbSet<EducationDegree> EducationDegrees { get; set; }
        public DbSet<EducationInstitute> EducationInstitutes { get; set; }
        public DbSet<EmployeeEducationDetails> EmployeeEducationDetails { get; set; }
        public DbSet<EmployeeExperienceDetails> EmployeeExperienceDetails { get; set; }

        public DbSet<StoreTransferNote> StoreTransferNotes { get; set; }
        public DbSet<StoreTransferNoteDetail> StoreTransferNoteDetails { get; set; }

        public virtual ProcGetMaxAccountNo ProcGetMaxAccountNo(Nullable<long> IdOrganization, Nullable<long> IdBranch, Nullable<long> IdParent, Nullable<int> IdParent1, Nullable<int> IdParent2, Nullable<int> IdParent3, Nullable<int> IdLevel)
        {
            var IdOrganizationParameter = IdOrganization.HasValue ?
                new SqlParameter("IdOrganization", IdOrganization) :
                new SqlParameter("IdOrganization", typeof(long));
            var IdBranchParameter = IdBranch.HasValue ?
                new SqlParameter("IdBranch", IdBranch) :
                new SqlParameter("IdBranch", typeof(long));
            var IdParentParameter = IdParent.HasValue ?
              new SqlParameter("IdParent", IdParent) :
              new SqlParameter("IdParent", typeof(long));

            var IdParent1Parameter = IdParent1.HasValue ?
              new SqlParameter("IdParent1", IdParent1) :
              new SqlParameter("IdParent1", typeof(int));

            var IdParent2Parameter = IdParent2.HasValue ?
              new SqlParameter("IdParent2", IdParent2) :
              new SqlParameter("IdParent2", typeof(int));

            var IdParent3Parameter = IdParent3.HasValue ?
              new SqlParameter("IdParent3", IdParent3) :
              new SqlParameter("IdParent3", typeof(int));

            var IdLevelParameter = IdLevel.HasValue ?
                new SqlParameter("IdLevel", IdLevel) :
                new SqlParameter("IdLevel", typeof(int));

            return this.Database.SqlQuery<ProcGetMaxAccountNo>("Proc_GetMaxAccountNo @IdOrganization,@IdBranch, @IdParent,@IdParent1,@IdParent2,@IdParent3,@IdLevel", IdOrganizationParameter, IdBranchParameter, IdParentParameter, IdParent1Parameter, IdParent2Parameter, IdParent3Parameter, IdLevelParameter).FirstOrDefault();
        }
        public virtual ProcGetClosingBalanceByAccount ProcGetClosingBalanceByAccount(Nullable<long> IdOrganization, Nullable<long> IdBranch, Nullable<long> IdAccount, Nullable<long> IdFinancialBookYear)
        {
            var IdOrganizationParameter = IdOrganization.HasValue ?
                new SqlParameter("IdOrganization", IdOrganization) :
                new SqlParameter("IdOrganization", typeof(long));
            var IdBranchParameter = IdBranch.HasValue ?
               new SqlParameter("IdBranch", IdBranch) :
               new SqlParameter("IdBranch", typeof(long));

            var IdAccountParameter = IdAccount.HasValue ?
              new SqlParameter("IdAccount", IdAccount) :
              new SqlParameter("IdAccount", typeof(long));
            var IdFinancialBookYearParameter = IdFinancialBookYear.HasValue ?
             new SqlParameter("IdFinancialBookYear", IdFinancialBookYear) :
             new SqlParameter("IdFinancialBookYear", typeof(long));

            return this.Database.SqlQuery<ProcGetClosingBalanceByAccount>("Proc_GetClosingBalanceByAccount @IdOrganization,@IdBranch, @IdAccount,@IdFinancialBookYear", IdOrganizationParameter, IdBranchParameter, IdAccountParameter, IdFinancialBookYearParameter).FirstOrDefault();
        }

        public virtual List<ProcGetUsersBaseMenusRight> ProcGetUsersBaseMenusRight(Nullable<long> userID, string LevelVal, string MenuName)
        {
            var userIDParameter = userID.HasValue ?
                new SqlParameter("UserID", userID) :
                new SqlParameter("UserID", typeof(long));

            var LevelParameter = LevelVal != null ?
               new SqlParameter("Level", LevelVal) :
               new SqlParameter("Level", typeof(string));

            var MenuNameParameter = LevelVal != null ?
              new SqlParameter("MenuName", MenuName) :
              new SqlParameter("MenuName", typeof(string));

            return this.Database.SqlQuery<ProcGetUsersBaseMenusRight>("Proc_GetUsersBaseMenusRight @UserID,@Level,@MenuName", userIDParameter, LevelParameter, MenuNameParameter).ToList();
        }
        public virtual List<ProcGetPermission> ProcGetPermissionByUserID(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new SqlParameter("UserID", userID) :
                new SqlParameter("UserID", typeof(long));

            return this.Database.SqlQuery<ProcGetPermission>("Proc_GetPermissionByUserID @UserID", userIDParameter).ToList();
        }
        public virtual List<ProcGetBranchCheckListByEmployeeId> ProcGetBranchCheckListByEmployeeId(Nullable<long> Id, Nullable<long> OrgId)
        {
            var idParameter = Id.HasValue ?
                new SqlParameter("Id", Id) :
                new SqlParameter("Id", typeof(long));

            var orgIdParameter = OrgId != null ?
               new SqlParameter("OrgId", OrgId) :
               new SqlParameter("OrgId", typeof(long));
            return this.Database.SqlQuery<ProcGetBranchCheckListByEmployeeId>("Proc_GetBranchCheckListByEmployeeId @Id,@OrgId", idParameter, orgIdParameter).ToList();
        }
        public virtual List<ProcIncomeStatement> ProcIncomeStatements(Nullable<long> IdOrganization, Nullable<long> IdFinancialBookYear, Nullable<DateTime> StartDate, Nullable<DateTime> EndDate)
        {
            var IdOrganizationParameter = IdOrganization.HasValue ?
                new SqlParameter("IdOrganization", IdOrganization) :
                new SqlParameter("IdOrganization", typeof(long));
            var IdFinancialBookYearParameter = IdFinancialBookYear.HasValue ?
              new SqlParameter("IdFinancialBook", IdFinancialBookYear) :
              new SqlParameter("IdFinancialBook", typeof(long));

            var StartDateParameter = StartDate.HasValue ?
              new SqlParameter("StartDate", StartDate) :
              new SqlParameter("StartDate", typeof(DateTime));

            var EndDateParameter = EndDate.HasValue ?
              new SqlParameter("EndDate", EndDate) :
              new SqlParameter("EndDate", typeof(DateTime));


            return this.Database.SqlQuery<ProcIncomeStatement>("Proc_IncomeStatement @IdOrganization,@IdFinancialBook, @StartDate,@EndDate", IdOrganizationParameter,IdFinancialBookYearParameter, StartDateParameter, EndDateParameter).ToList();
        }
        public virtual List<ProcBranchIncomeStatement> ProcBranchIncomeStatements(Nullable<long> IdOrganization, Nullable<long> IdBranch, Nullable<long> IdFinancialBookYear, Nullable<DateTime> StartDate, Nullable<DateTime> EndDate)
        {
            var IdOrganizationParameter = IdOrganization.HasValue ?
                new SqlParameter("IdOrganization", IdOrganization) :
                new SqlParameter("IdOrganization", typeof(long));
            var IdBranchParameter = IdBranch.HasValue ?
                new SqlParameter("IdBranch", IdBranch) :
                new SqlParameter("IdBranch", typeof(long));
            var IdFinancialBookYearParameter = IdFinancialBookYear.HasValue ?
              new SqlParameter("IdFinancialBook", IdFinancialBookYear) :
              new SqlParameter("IdFinancialBook", typeof(long));

            var StartDateParameter = StartDate.HasValue ?
              new SqlParameter("StartDate", StartDate) :
              new SqlParameter("StartDate", typeof(DateTime));

            var EndDateParameter = EndDate.HasValue ?
              new SqlParameter("EndDate", EndDate) :
              new SqlParameter("EndDate", typeof(DateTime));


            return this.Database.SqlQuery<ProcBranchIncomeStatement>("Proc_BranchIncomeStatement @IdOrganization,@IdBranch,@IdFinancialBook, @StartDate,@EndDate", IdOrganizationParameter, IdBranchParameter,IdFinancialBookYearParameter, StartDateParameter, EndDateParameter).ToList();
        }
    }
}
