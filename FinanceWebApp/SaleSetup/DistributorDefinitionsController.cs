using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.IO;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using Microsoft.Extensions.Logging;
using MudasirRehmanAlp.AppDAL;
using MudasirRehmanAlp.AppModels;
using MudasirRehmanAlp.Models;
using MudasirRehmanAlp.ModelsView;
using Newtonsoft.Json;
using PagedList;

namespace MudasirRehmanAlp.SaleSetup
{
    public class DistributorDefinitionsController : Controller
    {
        
        private AppEntities db = new AppEntities();
        AutoGenerateCodeDAL dALCode = new AutoGenerateCodeDAL();
        
        // GET: DistributorDefinitions

        public ActionResult Index(int page = 1, int pageSize = 15)
        {
            long OrganizationID = Convert.ToInt64(Session["OrganizationID"]);
            long BranchId = Convert.ToInt64(Session["BranchId"]);
            List<DistributorDefinition> listobj = new List<DistributorDefinition>();
            listobj = db.DistributorDefinitions.Where(a=>a.IsDeleted==false && a.OrganizationID==OrganizationID).OrderByDescending(a=>a.Id).ToList();
            PagedList<DistributorDefinition> model = new PagedList<DistributorDefinition>(listobj, page, pageSize);
            return View(model);

        }
        // GET: Distributors/Details/5
        public ActionResult Details(long? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            DistributorDefinition distributor = db.DistributorDefinitions.Find(id);
            if (distributor == null)
            {
                return HttpNotFound();
            }
            return View(distributor);
        }
        public ActionResult Print(long? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            DistributorDefinition distributor = db.DistributorDefinitions.Find(id);
            if (distributor == null)
            {
                return HttpNotFound();
            }
            return View(distributor);
        }
        // GET: Distributors/Create
        public ActionResult Create()
        {
            long OrganizationID = Convert.ToInt64(Session["OrganizationID"]);
            long BranchId = Convert.ToInt64(Session["BranchId"]);

            DistributorDefinition obj = new DistributorDefinition();
            obj.DistributorCode = dALCode.AutoGenerateDistributorCode(OrganizationID/*,BranchId*/);

            var BrancheObj = dALCode.GetBranchDefinition(BranchId);
            obj.OrganizationID = BrancheObj.OrganizationId;
            obj.BranchId = BrancheObj.Id;
            ViewBag.OrganizationUnitName = BrancheObj.OrganizationDefinition.OrganizationUnitName;
            ViewBag.BranchName = BrancheObj.Name;

            return View(obj);
        }

        // POST: Distributors/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(DistributorDefinition distributorDefinition, HttpPostedFileBase filedistributorImage)
        {
            byte[] Imagebytes;
            long UserID = Convert.ToInt64(Session["UserID"]);
            long OrganizationID = Convert.ToInt64(Session["OrganizationID"]);
            if (ModelState.IsValid)
            {
                if (filedistributorImage != null)
                {
                    using (BinaryReader br = new BinaryReader(filedistributorImage.InputStream))
                    {
                        Imagebytes = br.ReadBytes(filedistributorImage.ContentLength);
                        distributorDefinition.DistributorImage = Imagebytes;
                    }
                }
                distributorDefinition.DistributorCode = dALCode.AutoGenerateDistributorCode(OrganizationID/*,BranchId*/);
                distributorDefinition.IsDeleted = false;
                distributorDefinition.CreatedBy = UserID;
                distributorDefinition.CreatedDate = DateTime.Now;
                db.DistributorDefinitions.Add(distributorDefinition);
                db.SaveChanges();
                TempData["Validation"] = true;
                TempData["ErrorMessage"] = "Distributor has been saved successfully";
                return RedirectToAction("Index");
            }
            return View(distributorDefinition);
        }

        // GET: Distributors/Edit/5
        public ActionResult Edit(long? id)
        {
           
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            DistributorDefinition distributor = db.DistributorDefinitions.Find(id);
            if (distributor == null)
            {
                return HttpNotFound();
            }
            
            return View(distributor);
        }

        // POST: Distributors/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(DistributorDefinition distributorDefinition, HttpPostedFileBase filedistributorImage)
        {
            byte[] Imagebytes;
            long UserID = Convert.ToInt64(Session["UserID"]);
            long OrganizationID = Convert.ToInt64(Session["OrganizationID"]);
            if (ModelState.IsValid)
            {
                if (filedistributorImage != null)
                {
                    using (BinaryReader br = new BinaryReader(filedistributorImage.InputStream))
                    {
                        Imagebytes = br.ReadBytes(filedistributorImage.ContentLength);
                        distributorDefinition.DistributorImage = Imagebytes;
                    }
                }
               
                distributorDefinition.UpdatedBy = UserID;
                distributorDefinition.UpdatedDate = DateTime.Now;
                distributorDefinition.IsDeleted = false;
                db.Entry(distributorDefinition).State = EntityState.Modified;
                db.SaveChanges();
                TempData["Validation"] = true;
                TempData["ErrorMessage"] = "Distributor has been updated successfully";
                return RedirectToAction("Index");
            }
            return View(distributorDefinition);
        }

        // GET: DistributorDefinitions/Delete/5
        public ActionResult Delete(long? id)
        {
            long UserID = Convert.ToInt64(Session["UserID"]);
            long OrganizationID = Convert.ToInt64(Session["OrganizationID"]);
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            DistributorDefinition distributorDefinition = db.DistributorDefinitions.Find(id);
            if (distributorDefinition == null)
            {
                return HttpNotFound();
            }
            
            distributorDefinition.DeletedBy = UserID;
            distributorDefinition.DeletedDate = DateTime.Now;
            distributorDefinition.IsDeleted = true;
            db.Entry(distributorDefinition).State = EntityState.Modified;
            db.SaveChanges();
            TempData["Validation"] = true;
            TempData["ErrorMessage"] = "Distributor has been deleted successfully";
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
        public JsonResult AccountCheckInDistributor(string ID)
        {
            long id = 0;
            string Message = "";
            if (!String.IsNullOrEmpty(ID))
            {
                id = Convert.ToInt64(ID);
            }

            var Result = db.DistributorDefinitions.Where(a => a.IsActive == true && a.IsDeleted == false && a.AccountID == id).FirstOrDefault();
            if (Result != null)
            {
                Message = "Yes";
            }
            else
            {
                Message = "No";
            }
            return Json(Message, JsonRequestBehavior.AllowGet);
        }
        public ActionResult Search(string searchModel)
        {
            long OrganizationID = Convert.ToInt64(Session["OrganizationID"]);
            long BranchId = Convert.ToInt64(Session["BranchId"]);
            DistributorDefinition _searchObject = JsonConvert.DeserializeObject<DistributorDefinition>(searchModel);
            List<DistributorDefinition> _listObject = new List<DistributorDefinition>();
            _listObject = db.DistributorDefinitions.Where(a => a.IsActive == true && a.IsDeleted == false && a.OrganizationID == OrganizationID && a.BranchId== BranchId).ToList();
            if (!String.IsNullOrEmpty(_searchObject.DistributorCode) && !String.IsNullOrEmpty(_searchObject.DistributorName))
            {
                _listObject = _listObject.Where(r => r.DistributorCode != null && r.DistributorCode.ToString().ToLower().Contains(_searchObject.DistributorCode) || r.DistributorName.ToString().ToLower().Contains(_searchObject.DistributorName)).ToList();
            }
            else if (!String.IsNullOrEmpty(_searchObject.DistributorCode))
            {
                _listObject = _listObject.Where(r => r.DistributorCode != null && r.DistributorCode.ToString().ToLower().Contains(_searchObject.DistributorCode)).ToList();
            }
            else if (!String.IsNullOrEmpty(_searchObject.DistributorName))
            {
                _listObject = _listObject.Where(r => r.DistributorName != null && r.DistributorName.ToString().ToLower().Contains(_searchObject.DistributorName)).ToList();
            }
            return PartialView("_Search", _listObject);
        }
    }
}
